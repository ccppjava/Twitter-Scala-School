"A type system is a syntactic method for authomatically checking the absence of certain erroneous behaviours by classifying program phrases according to the kinds of values they compute."

Scala type system chief features include:
parameteric polymorphism
(local) type inference
existential quantification
views

Polymorphism is used in order to write generic code (for values of different types) without compromising static typing richness.

scala> def drop1[A](l: List[A]) = l.tail
drop1: [A](l: List[A])List[A]

scala> drop1(List(1, 2, 3, 4))
  res31: List[Int] = List(2, 3, 4)

// Scala has rank-1 polymorphism ??
// TODO: understand above statement

The classic method for type inference in functional programming languages is Hindley-Milner, and it was first employed in ML.

In scala all type inference is local.

scala> def id[T](x: T) = x
id: [T](x: T)T

scala> id(43)
res36: Int = 43

scala> id("abc")
res37: java.lang.String = abc


A central question that comes up when mixing OO with polymorphism is: if T’ is a subclass of T, is Container[T’] considered a subclass of Container[T]? Variance annotations allow you to express the following relationships between class hierarchies & polymorphic types:

covariant      ---  C[T’] is a subclass of C[T]
contravariant  ---  C[T] is a subclass of C[T’]
invariant      ---  C[T] and C[T’] are not related

The subtype relationship really means: for a given type T, if T’ is a subtype, can you substitute it?

> class Covariant[+A]
> defined class Covariant
>
> scala> val cv: Covariant[AnyRef] = new Covariant[String]
> cv: Covariant[AnyRef] = Covariant@50628354
>
> scala> val cv: Covariant[String] = new Covariant[AnyRef]
> <console>:8: error: type mismatch;
>  found   : Covariant[AnyRef]
>   required: Covariant[String]
>          val cv: Covariant[String] = new Covariant[AnyRef]
>                                             ^
>
>                                             scala> class Contravariant[-A]
>                                             defined class Contravariant

> scala> val cv: Contravariant[String] = new Contravariant[String]
> cv: Contravariant[String] = Contravariant@6f8a8b32
> 
> scala> val cv: Contravariant[AnyRef] = new Contravariant[String]
> <console>:8: error: type mismatch;
>  found   : Contravariant[String]
>   required: Contravariant[AnyRef]
> 	       val cv: Contravariant[AnyRef] = new Contravariant[String]


Contravariance seems strange!!! Indeed.

> trait Function1 [-T, +R] extends AnyRef

The real usage of convariant and contravariant: (think as if substitution)

> scala> val f: (B => C) = ((b: B) => new C)
> f: (B) => C = <function1>
> 
> scala> val f: (B => C) = ((a: A) => new C)
> f: (B) => C = <function1>
> 
> scala> val f: (B => C) = ((a: A) => new D)
> f: (B) => C = <function1>
> 
> scala> val f: (B => C) = ((c: C) => new D)
> <console>:11: error: type mismatch;
>  found   : (C) => D
>   required: (B) => C
> 	       val f: (B => C) = ((c: C) => new D)

Bounds
Scala allows you to restrict polymorphic variables using bounds. These bounds express subtype relationships.

> scala> class F { def foo = "f" }
> defined class F
> 
> scala> class E extends F { override def foo = "E" }
> defined class E
> 
> scala> def callFoo[T](foos: Seq[T]) = foos map (_.foo) foreach println
> <console>:7: error: value foo is not a member of type parameter T
>       def callFoo[T](foos: Seq[T]) = foos map (_.foo) foreach println
>                                                   ^
> 
> scala> def callFoo[T <: F](foos: Seq[T]) = foos map (_.foo) foreach println
> callFoo: [T <: F](foos: Seq[T])Unit
> 
> scala> callFoo(Seq(new E, new F))
> E
> f

Lower type bounds are also supported. They go hand-in-hand with contravariance.

> scala> class Node[T](x:T) {def sub(v:T): Node[T] = new Node(v)}
> defined class Node

if we want to make it covriant in type T:

> scala> class Node[+T](x:T) {def sub(v:T): Node[T] = new Node(v)}
> <console>:8: error: covariant type T occurs in contravariant position in type T of value v
>        class Node[+T](x:T) {def sub(v:T): Node[T] = new Node(v)}

Recall that method arguments are contravariant, and so we perform our substitution trick, 
using the same classes as before:

> scala> class Node[B](x:B) {def sub(v:B): Node[B] = new Node(v)}
> defined class Node

is NOT subtype of:

> scala> class Node[A](x:A) {def sub(v:A): Node[A] = new Node(v)}
> defined class Node

because A cannot be substituted for B in the argument of "sub". However, we can use lower bounding to enforce correctness.

> scala> class Node[+T](x:T) {def sub[U >: T](v:U): Node[U] = new Node(v)}
> defined class Node
> 
> scala> (new Node(new B)).sub(new B)
> res39: Node[B] = Node@84b2f7f
> 
> scala> (new Node(new B)).sub(new B).sub(new A)
> res40: Node[A] = Node@5c1c49d4
> 
> scala> (new Node(new B)).sub(new B).asInstanceOf[Node[C]]
> res42: Node[C] = Node@74e312e
> 
> scala> ((new Node(new B)).sub(new B).sub(new A)).sub(new C)
> res43: Node[A] = Node@2b063d99

Note also how the type changes with subsequent calls to "sub".


http://en.wikipedia.org/wiki/Covariance_and_contravariance_%28computer_science%29

Formal definition:
Within the type system of a programming language, a typing rule or a type conversion operator is:
covariant: if it preserves the ordering, <=, of types, which orders types from more specific to more generic;
contravariant: if it reverses this ordering, which orders types from more generic to more specific;
invariant: if neither of these applies.

There terms come from category theory, which has a general definition of
covariance and contravariance that unifies the computer science definition
of these terms with the definition used by vector spaces.

The distinction is important in considering argument and return types of 
methods in class hierarchies. In object-oriented languages such as Python,
if class B is a subtype of class A, then all member functions of B must
return the same or narrower set of types as A; the return type is said to
be covariant. On the other hand, if the member function of B take the same
or broader set of arguments compared with the member function A, the 
argument type is said to be contravariant. 

The problem for instance B is how to be perfectly substituable for instance
of A. The only way to guarantee type safety and substitutability is to be 
equally or more liberal than A on inputs (contravariant), and to be equally 
or more strict than A on outputs (covariant). Note that not all programming
languages guarantee both properties in every context, and that some are 
unnecessarily strict; they are said to support covariance or contravariance 
in a given context.



Quantification

> scala> def count[A](l: List[A]) = l.size
> count: [A](l: List[A])Int
> 
> scala> def count(l: List[_]) = l.size
> count: (l: List[_])Int
> 
> scala> def count(l: List[T forSome { type T }]) = l.size
> count: (l: List[T forSome { type T }])Int
> 
> scala> def drop1(l: List[_]) = l.tail
> drop1: (l: List[_])List[Any]
> 
> scala> def drop1(l: List[T forSome { type T }]) = l.tail
> drop1: (l: List[T forSome { type T }])List[T forSome { type T }]
> 
> scala> def hashCodes(l: Seq[_ <: AnyRef]) = l map (_.hashCode)
> hashCodes: (l: Seq[_ <: AnyRef])Seq[Int]
> 
> scala> hashCodes(Seq("one", "two", "three"))
> res44: Seq[Int] = List(110182, 115276, 110339486)
> 
> scala> hashCodes(Seq(1, 2, 3))
> <console>:9: error: type mismatch;
>  found   : Int(1)
>  required: AnyRef
>  Note: primitive types are not implicitly converted to AnyRef.
>  You can safely force boxing by casting x.asInstanceOf[AnyRef].
>         hashCodes(Seq(1, 2, 3))
>                      ^


